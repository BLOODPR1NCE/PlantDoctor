 from flask import Flask, render_template, request, redirect, url_for, session, flash
import psycopg2
from psycopg2 import pool
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'ваш_секретный_ключ'

# Настройки подключения к БД
DB_CONFIG = {
    "host": "localhost",
    "database": "plantdoctor",
    "user": "ваш_пользователь",
    "password": "ваш_пароль",
    "port": "5432"
}

connection_pool = psycopg2.pool.SimpleConnectionPool(
    minconn=1,
    maxconn=10,
    **DB_CONFIG
)

def init_db():
    conn = connection_pool.getconn()
    cursor = conn.cursor()
    
    try:
        # Создание таблиц
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id SERIAL PRIMARY KEY,
                name VARCHAR(50) NOT NULL,
                surname VARCHAR(50) NOT NULL,
                login VARCHAR(30) UNIQUE NOT NULL,
                password VARCHAR(100) NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS plant_types (
                type_id SERIAL PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS plants (
                plant_id SERIAL PRIMARY KEY,
                name VARCHAR(50) NOT NULL,
                type_id INTEGER REFERENCES plant_types(type_id),
                description TEXT,
                care_tips TEXT
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_plants (
                user_plant_id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(user_id),
                plant_id INTEGER REFERENCES plants(plant_id),
                UNIQUE(user_id, plant_id)
            )
        """)
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS care_schedule (
                schedule_id SERIAL PRIMARY KEY,
                plant_id INTEGER REFERENCES plants(plant_id),
                user_id INTEGER REFERENCES users(user_id),
                watering_frequency INTEGER NOT NULL,
                fertilizing_frequency INTEGER NOT NULL,
                last_watering DATE,
                UNIQUE(plant_id, user_id)
            )
        """)
        
        # Добавление тестовых данных
        cursor.execute("SELECT COUNT(*) FROM plant_types")
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
                INSERT INTO plant_types (name) VALUES
                ('Фикус'), ('Орхидея'), ('Кактус'), ('Монстера'), ('Спатифиллум')
            """)
            
            cursor.execute("""
                INSERT INTO plants (name, type_id, description, care_tips) VALUES
                ('Фикус Бенджамина', 1, 'Дерево с мелкими листьями', 'Поливать умеренно'),
                ('Фаленопсис белый', 2, 'Цветущая орхидея', 'Полив методом погружения'),
                ('Кактус маммилярия', 3, 'Небольшой круглый кактус', 'Поливать редко'),
                ('Монстера деликатесная', 4, 'Крупные резные листья', 'Опрыскивать листья'),
                ('Спатифиллум Уоллиса', 5, 'Белые цветы', 'Любит влажность')
            """)
        
        conn.commit()
    except Exception as e:
        conn.rollback()
        print(f"Ошибка инициализации БД: {str(e)}")
    finally:
        connection_pool.putconn(conn)

        

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    conn = connection_pool.getconn()
    cursor = conn.cursor()
    
    try:
        # Получаем все растения
        cursor.execute("SELECT * FROM plants")
        all_plants = cursor.fetchall()
        
        # Получаем растения пользователя
        cursor.execute("""
            SELECT p.* FROM user_plants up
            JOIN plants p ON up.plant_id = p.plant_id
            WHERE up.user_id = %s
        """, (session['user_id'],))
        user_plants = cursor.fetchall()
        
        # Получаем данные по уходу
        care_data = {}
        cursor.execute("""
            SELECT plant_id, watering_frequency, fertilizing_frequency, last_watering 
            FROM care_schedule 
            WHERE user_id = %s
        """, (session['user_id'],))
        for row in cursor.fetchall():
            care_data[row[0]] = {
                'watering': row[1],
                'fertilizing': row[2],
                'last_watering': row[3].strftime('%Y-%m-%d') if row[3] else ''
            }
        
    except Exception as e:
        flash(f"Ошибка загрузки данных: {str(e)}")
        all_plants = []
        user_plants = []
        care_data = {}
    finally:
        connection_pool.putconn(conn)
    
    return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PlantDoctor - Главная</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }}
        h1, h2 {{
            color: #2e7d32;
        }}
        .plant-list {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }}
        .plant-card {{
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 5px;
            background: white;
        }}
        .plant-card h3 {{
            margin-top: 0;
            color: #1b5e20;
        }}
        form {{
            margin-top: 10px;
        }}
        input, button {{
            padding: 8px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
        }}
        button {{
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }}
        button:hover {{
            background-color: #388E3C;
        }}
        .nav-links a {{
            margin-left: 15px;
            text-decoration: none;
            color: #2e7d32;
            font-weight: bold;
        }}
        .nav-links a:hover {{
            text-decoration: underline;
        }}
        .flash-messages {{
            margin: 10px 0;
            padding: 10px;
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>PlantDoctor</h1>
            <div class="nav-links">
                <a href="/profile">Профиль</a>
                <a href="/logout">Выйти</a>
            </div>
        </header>

        {'<div class="flash-messages"><ul><li>' + '</li><li>'.join([msg for category, msg in get_flashed_messages(with_categories=True)]) + '</li></ul></div>' if get_flashed_messages() else ''}
        

        <h2>Добро пожаловать, {session.get('user_name', 'Гость')}!</h2>

        <section>
            <h2>Мои растения</h2>
            {% raw %}
            {f'<div class="plant-list">' + ''.join([f'''
                <div class="plant-card">
                    <h3>{plant[1]}</h3>
                    <p>Тип: {plant[2]}</p>
                    <p>{plant[3]}</p>
                    <form action="/update_care" method="post">
                        <input type="hidden" name="plant_id" value="{plant[0]}">
                        <label for="frequency">Частота полива (дни):</label>
                        <input type="number" id="frequency" name="frequency" value="{care_data.get(plant[0], {}).get('watering', '7')}" min="1" required>
                        
                        <label for="last_watering">Последний полив:</label>
                        <input type="date" id="last_watering" name="last_watering" value="{care_data.get(plant[0], {}).get('last_watering', '')}" required>
                        
                        <button type="submit">Сохранить уход</button>
                    </form>
                </div>
            ''' for plant in user_plants]) + '</div>' if user_plants else '<p>У вас пока нет растений. Добавьте их из списка ниже.</p>'}
            {% endraw %}
        </section>

        <section>
            <h2>Все растения</h2>
            {% raw %}
            {f'<div class="plant-list">' + ''.join([f'''
                <div class="plant-card">
                    <h3>{plant[1]}</h3>
                    <p>Тип: {plant[2]}</p>
                    <p>{plant[3]}</p>
                    <form action="/add_plant" method="post">
                        <input type="hidden" name="plant_id" value="{plant[0]}">
                        <button type="submit">Добавить в мои растения</button>
                    </form>
                </div>
            ''' for plant in all_plants]) + '</div>'}
            {% endraw %}
        </section>
    </div>
</body>
</html>
"""

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        login = request.form['login']
        password = request.form['password']
        
        conn = connection_pool.getconn()
        cursor = conn.cursor()
        
        try:
            cursor.execute("SELECT * FROM users WHERE login = %s", (login,))
            user = cursor.fetchone()
            
            if user and check_password_hash(user[4], password):
                session['user_id'] = user[0]
                session['user_name'] = user[1]
                return redirect('/')
            else:
                flash('Неверный логин или пароль')
        except Exception as e:
            flash(f"Ошибка входа: {str(e)}")
        finally:
            connection_pool.putconn(conn)
    
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PlantDoctor - Вход</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .login-container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
        }
        h1 {
            color: #2e7d32;
            text-align: center;
            margin-top: 0;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-top: 10px;
            color: #555;
        }
        input {
            padding: 10px;
            margin: 5px 0 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px;
            border: none;
            
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #388E3C;
        }
        .register-link {
            text-align: center;
            margin-top: 20px;
        }
        .register-link a {
            color: #2e7d32;
            text-decoration: none;
        }
        .register-link a:hover {
            text-decoration: underline;
        }
        .flash-messages {
            margin: 10px 0;
            padding: 10px;
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <h1>Вход в систему</h1>
        
        {'<div class="flash-messages"><ul><li>' + '</li><li>'.join([msg for category, msg in get_flashed_messages(with_categories=True)]) + '</li></ul></div>' if get_flashed_messages() else ''}

        <form action="/login" method="post">
            <label for="login">Логин:</label>
            <input type="text" id="login" name="login" required>
            
            <label for="password">Пароль:</label>
            <input type="password" id="password" name="password" required>
            
            <button type="submit">Войти</button>
        </form>
        
        <div class="register-link">
            Нет аккаунта? <a href="/register">Зарегистрируйтесь</a>
        </div>
    </div>
</body>
</html>
"""

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        surname = request.form['surname']
        login = request.form['login']
        password = generate_password_hash(request.form['password'])
        
        conn = connection_pool.getconn()
        cursor = conn.cursor()
        
        try:
            cursor.execute(
                "INSERT INTO users (name, surname, login, password) VALUES (%s, %s, %s, %s)",
                (name, surname, login, password)
            )
            conn.commit()
            flash('Регистрация успешна! Войдите в систему.')
            return redirect('/login')
        except psycopg2.IntegrityError:
            conn.rollback()
            flash('Ошибка регистрации: такой логин уже существует')
        except Exception as e:
            conn.rollback()
            flash(f"Ошибка регистрации: {str(e)}")
        finally:
            connection_pool.putconn(conn)
    
    return """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PlantDoctor - Регистрация</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .register-container {
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
        }
        h1 {
            color: #2e7d32;
            text-align: center;
            margin-top: 0;
        }
        form {
            display: flex;
            flex-direction: column;
        }
        label {
            margin-top: 10px;
            color: #555;
        }
        input {
            padding: 10px;
            margin: 5px 0 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #388E3C;
        }
        .login-link {
            text-align: center;
            margin-top: 20px;
        }
        .login-link a {
            
            color: #2e7d32;
            text-decoration: none;
        }
        .login-link a:hover {
            text-decoration: underline;
        }
        .flash-messages {
            margin: 10px 0;
            padding: 10px;
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="register-container">
        <h1>Регистрация</h1>
        
        {'<div class="flash-messages"><ul><li>' + '</li><li>'.join([msg for category, msg in get_flashed_messages(with_categories=True)]) + '</li></ul></div>' if get_flashed_messages() else ''}

        <form action="/register" method="post">
            <label for="name">Имя:</label>
            <input type="text" id="name" name="name" required>
            
            <label for="surname">Фамилия:</label>
            <input type="text" id="surname" name="surname" required>
            
            <label for="login">Логин:</label>
            <input type="text" id="login" name="login" required>
            
            <label for="password">Пароль:</label>
            <input type="password" id="password" name="password" required>
            
            <button type="submit">Зарегистрироваться</button>
        </form>
        
        <div class="login-link">
            Уже есть аккаунт? <a href="/login">Войдите</a>
        </div>
    </div>
</body>
</html>
"""

@app.route('/add_plant', methods=['POST'])
def add_plant():
    if 'user_id' not in session:
        return redirect('/login')
    
    plant_id = request.form['plant_id']
    
    conn = connection_pool.getconn()
    cursor = conn.cursor()
    
    try:
        cursor.execute(
            "INSERT INTO user_plants (user_id, plant_id) VALUES (%s, %s)",
            (session['user_id'], plant_id)
        )
        conn.commit()
        flash('Растение успешно добавлено в ваш список')
    except psycopg2.IntegrityError:
        conn.rollback()
        flash('Это растение уже есть в вашем списке')
    except Exception as e:
        conn.rollback()
        flash(f"Ошибка добавления растения: {str(e)}")
    finally:
        connection_pool.putconn(conn)
    
    return redirect('/')

@app.route('/update_care', methods=['POST'])
def update_care():
    if 'user_id' not in session:
        return redirect('/login')
    
    plant_id = request.form['plant_id']
    frequency = request.form['frequency']
    last_watering = request.form['last_watering']
    
    conn = connection_pool.getconn()
    cursor = conn.cursor()
    
    try:
        cursor.execute("""
            INSERT INTO care_schedule (plant_id, user_id, watering_frequency, last_watering)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (plant_id, user_id) 
            DO UPDATE SET 
                watering_frequency = EXCLUDED.watering_frequency,
                last_watering = EXCLUDED.last_watering
        """, (plant_id, session['user_id'], frequency, last_watering))
        
        conn.commit()
        flash('Данные по уходу обновлены')
    except Exception as e:
        conn.rollback()
        flash(f"Ошибка обновления данных: {str(e)}")
    finally:
        connection_pool.putconn(conn)
    
    return redirect('/')



@app.route('/profile', methods=['GET', 'POST'])
def profile():
    if 'user_id' not in session:
        return redirect('/login')
    
    conn = connection_pool.getconn()
    cursor = conn.cursor()
    
    if request.method == 'POST':
        name = request.form['name']
        surname = request.form['surname']
        
        try:
            cursor.execute(
                "UPDATE users SET name = %s, surname = %s WHERE user_id = %s",
                (name, surname, session['user_id'])
            )
            conn.commit()
            session['user_name'] = name
            flash('Данные успешно обновлены')
        except Exception as e:
            conn.rollback()
            flash(f"Ошибка обновления данных: {str(e)}")
    
    try:
        cursor.execute("SELECT * FROM users WHERE user_id = %s", (session['user_id'],))
        user = cursor.fetchone()
    except Exception as e:
        flash(f"Ошибка загрузки профиля: {str(e)}")
        user = None
    finally:
        connection_pool.putconn(conn)
    
    return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PlantDoctor - Профиль</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }}
        .profile-container {{
            max-width: 800px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }}
        h1 {{
            color: #2e7d32;
            margin-top: 0;
        }}
        .profile-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }}
        .back-link {{
            color: #2e7d32;
            text-decoration: none;
            font-weight: bold;
        }}
        .back-link:hover {{
            text-decoration: underline;
        }}
        form {{
            max-width: 500px;
        }}
        label {{
            display: block;
            margin-top: 15px;
            color: #555;
        }}
        input {{
            width: 100%;
            padding: 10px;
            margin: 5px 0 15px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }}
        button {{
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }}
        button:hover {{
            background-color: #388E3C;
        }}
        .user-info {{
            margin-bottom: 20px;
        }}
        .flash-messages {{
            margin: 10px 0;
            padding: 10px;
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
        }}
    </style>
</head>
<body>
    <div class="profile-container">
        <div class="profile-header">
            <h1>Мой профиль</h1>
            <a href="/" class="back-link">На главную</a>
        </div>
        
        {'<div class="flash-messages"><ul><li>' + '</li><li>'.join([msg for category, msg in get_flashed_messages(with_categories=True)]) + '</li></ul></div>' if get_flashed_messages() else ''}
        

        <div class="user-info">
            <form action="/profile" method="post">
                <label for="name">Имя:</label>
                <input type="text" id="name" name="name" value="{user[1] if user else ''}" required>
                
                <label for="surname">Фамилия:</label>
                <input type="text" id="surname" name="surname" value="{user[2] if user else ''}" required>
                
                <label>Логин:</label>
                <input type="text" value="{user[3] if user else ''}" disabled>
                
                <button type="submit">Сохранить изменения</button>
            </form>
        </div>
    </div>
</body>
</html>
"""

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/login')

if __name__ == '__main__':
    init_db()
    app.run(debug=True)